# coding: utf-8


from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class PolicyRuleParams(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, value=None):
        """
        PolicyRuleParams - a model defined in Swagger

        :param name: The name of this PolicyRuleParams.
        :type name: str
        :param value: The value of this PolicyRuleParams.
        :type value: str
        """
        self.swagger_types = {
            'name': str,
            'value': str
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value'
        }

        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PolicyRule_params of this PolicyRuleParams.
        :rtype: PolicyRuleParams
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self):
        """
        Gets the name of this PolicyRuleParams.

        :return: The name of this PolicyRuleParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PolicyRuleParams.

        :param name: The name of this PolicyRuleParams.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """
        Gets the value of this PolicyRuleParams.

        :return: The value of this PolicyRuleParams.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this PolicyRuleParams.

        :param value: The value of this PolicyRuleParams.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

