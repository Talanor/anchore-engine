# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PolicyValidationResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid': 'bool',
        'validation_details': 'list[PolicyEvaluationProblem]'
    }

    attribute_map = {
        'valid': 'valid',
        'validation_details': 'validation_details'
    }

    def __init__(self, valid=None, validation_details=None):
        """
        PolicyValidationResponse - a model defined in Swagger
        """

        self._valid = None
        self._validation_details = None

        if valid is not None:
          self.valid = valid
        if validation_details is not None:
          self.validation_details = validation_details

    @property
    def valid(self):
        """
        Gets the valid of this PolicyValidationResponse.
        The validation result. If True, the policy bundle is valid. If False, it is invalid and there should be content in the validation_details property.

        :return: The valid of this PolicyValidationResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """
        Sets the valid of this PolicyValidationResponse.
        The validation result. If True, the policy bundle is valid. If False, it is invalid and there should be content in the validation_details property.

        :param valid: The valid of this PolicyValidationResponse.
        :type: bool
        """

        self._valid = valid

    @property
    def validation_details(self):
        """
        Gets the validation_details of this PolicyValidationResponse.
        An array of validation details including error messages as appropriate. Will be empty on a successful validation.

        :return: The validation_details of this PolicyValidationResponse.
        :rtype: list[PolicyEvaluationProblem]
        """
        return self._validation_details

    @validation_details.setter
    def validation_details(self, validation_details):
        """
        Sets the validation_details of this PolicyValidationResponse.
        An array of validation details including error messages as appropriate. Will be empty on a successful validation.

        :param validation_details: The validation_details of this PolicyValidationResponse.
        :type: list[PolicyEvaluationProblem]
        """

        self._validation_details = validation_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PolicyValidationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
