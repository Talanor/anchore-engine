# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PolicyBundleLight(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_id': 'str',
        'policy': 'Policy',
        'whitelists': 'list[Whitelist]'
    }

    attribute_map = {
        'image_id': 'image_id',
        'policy': 'policy',
        'whitelists': 'whitelists'
    }

    def __init__(self, image_id=None, policy=None, whitelists=None):
        """
        PolicyBundleLight - a model defined in Swagger
        """

        self._image_id = None
        self._policy = None
        self._whitelists = None

        self.image_id = image_id
        self.policy = policy
        if whitelists is not None:
          self.whitelists = whitelists

    @property
    def image_id(self):
        """
        Gets the image_id of this PolicyBundleLight.

        :return: The image_id of this PolicyBundleLight.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """
        Sets the image_id of this PolicyBundleLight.

        :param image_id: The image_id of this PolicyBundleLight.
        :type: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")

        self._image_id = image_id

    @property
    def policy(self):
        """
        Gets the policy of this PolicyBundleLight.

        :return: The policy of this PolicyBundleLight.
        :rtype: Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """
        Sets the policy of this PolicyBundleLight.

        :param policy: The policy of this PolicyBundleLight.
        :type: Policy
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")

        self._policy = policy

    @property
    def whitelists(self):
        """
        Gets the whitelists of this PolicyBundleLight.

        :return: The whitelists of this PolicyBundleLight.
        :rtype: list[Whitelist]
        """
        return self._whitelists

    @whitelists.setter
    def whitelists(self, whitelists):
        """
        Sets the whitelists of this PolicyBundleLight.

        :param whitelists: The whitelists of this PolicyBundleLight.
        :type: list[Whitelist]
        """

        self._whitelists = whitelists

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PolicyBundleLight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
